//: [Previous](@previous)

import Foundation

let input = """
                                             L   O   Z     Y     A H           O       T
                                             D   L   Z     U     R V           R       E
  ###########################################.###.###.#####.#####.#.###########.#######.#########################################
  #.#.#.#.............#.#.......#...#...#.......#...#...#...#.#...#.....#.....#.#.........#.....#.........#.....#.........#.....#
  #.#.#.###.###.#####.#.#.#####.###.###.#######.#.#.###.#.###.###.#.###.###.#.#.#.###.###.#.#####.###.###.###.###.#.###.#######.#
  #.#.#.....#...#.........#.....#...#.....#.....#.#...#.#.......#...#...#.#.#.#.#...#...#...#.#...#.#.#...#.......#.#...#...#.#.#
  #.#.#.###.#######.#.#.#######.###.###.###.#####.###.#.###.###.#####.###.#.#.#.#.###.###.###.###.#.#.#.#.#####.#########.###.#.#
  #.....#...#...#...#.#.#.......#.....#.#...#...#...#.....#.#...#...#...#...#.#.#.#.....#.........#.#.#.#.#.#.....#.......#.....#
  #.#.###.#.#.#############.###.#####.#.#.###.#.###.###.#######.#.#.###.#.###.#.#.###.#.#.#.#.#####.#######.###.#######.###.###.#
  #.#.#...#.#.#.#.#.....#.#.#.#.............#.#.#.....#.#.......#.#.....#...#.#.#.#.#.#.#.#.#.............#.#...#.#.#.#...#.#...#
  ###.###.#.#.#.#.#####.#.###.#.###########.#.#.#.#########.###.#.#.#######.#.#.#.#.#########.#.###.#######.###.#.#.#.#.###.#.#.#
  #...#.#.#.#...#.#.#.#...#.....#...#.........#.#.#.#...#.#.#...#.#.#...#...#...#...........#.#...#...#.#.#.....#.#...#...#.#.#.#
  ###.#.#####.###.#.#.###.#.#.#.#.#####.###.###.#.#.#.###.#####.#.###.#.#.#####.#.#.#########.#######.#.#.###.###.#.###.#######.#
  #.....#.#.#.......#.#.....#.#.#.....#...#...#.#.....#...#.#...#.#...#.#.....#.#.#.#.....#.#...#...#.#.#.#.....#.....#.......#.#
  #.#####.#.###.#.#.#.#.#.#.#####.#.#.#####.###.#.#####.###.#.#.#.#.###.#.#######.#####.###.#####.#####.#.#.#.###.#######.#####.#
  #.#.....#...#.#.#...#.#.#.#.#...#.#.........#.#.#.#...#.#.#.#.#.#...#.#.....#.........#...#...#.#.#.#.#...#.#.....#.#.....#...#
  #####.#####.#.#####.#####.#.#.#.###.#.###.###.#.#.#.###.#.#.#.#.###.#.###.###.###.#.#####.#.###.#.#.#.#.###.###.###.###.#####.#
  #...#.#.....#.#.......#...#...#.#.#.#.#...#...#.....#.#...#.#.#.....#.#...#...#...#.......................#.#.#.#.........#...#
  ###.#.###.#.#######.#####.#######.#######.###.###.#.#.###.###.#.#.###.#.###.#.#.#######.#.#.#.###.#.#.#.#####.#.###.#.###.###.#
  #.......#.#...#.........#.#.#.........#...#...#...#.#.#...#.#.#.#.#...#.#.#.#.#...#.#.#.#.#.#.#...#.#.#...#.#.#...#.#...#.#.#.#
  ###.#######.#######.###.###.#####.#######.###.#.#####.#.#.###.###.#.#.#.#.#####.###.#.###########.#####.###.#.#.#.#######.#.#.#
  #.#.#.#.#.#.#.....#...#.#...#.........#.#.#.#.#...#.....#...#.#.#.#.#.#.......#.#...........#.#.#.....#.#.....#.#.#...#.....#.#
  #.#.#.#.#.#.#####.#.#######.#######.###.###.#.#.#####.#.#.#.#.#.#.###.###.#.###.###.#.###.#.#.#.#############.#.#####.#####.#.#
  #...#...#.......#.#.#.#...#.#.#.#.#...#.......#...#...#.#.#.#...#.#.#...#.#.#.......#...#.#.........#.#...#.#.....#.#...#.....#
  ###.###.#.#.#.#.#.#.#.###.#.#.#.#.###.#####.#.#.#######.#.###.#####.#.###.#####.###.#.#.#######.#.#.#.###.#.#.#.###.###.#.#.###
  #.#...#.#.#.#.#.#.#.#.#.#.....#.........#...#.#.#.#...#.#.....#.......#.....#...#...#.#.#.#.....#.#.....#...#.#.#.......#.#...#
  #.###.#.#######.#.#.#.#.#.###.#.#####.#######.#.###.#.#.#########.#.#.#.#############.###.###############.#####.#####.#######.#
  #.#.....#.#.#.#.#...#.#.....#.#.#.......#.#...#.....#.#.......#.#.#.#.#...#...#.#.#.............#...#.#...#.#.#...#...#.......#
  #.#####.#.#.#.#.###.#.#.#########.#.###.#.###.#######.#######.#.#####.#.#.#.###.#.###.#########.###.#.###.#.#.#.#.###.###.#.#.#
  #...#.......#.#.#.#...#.#.....#...#...#.....#.#.....#...#.......#.#...#.#.#.#.......#.......#.#.#.......#.#.....#.#.#.#...#.#.#
  #.#########.#.#.#.#.###.#.#######.###.###.#.#.#.###.#.###.#######.#.###.###.#####.#.#.#######.#.#.#######.#####.###.#.#.###.###
  #.....#...........#.#.......#.#.....#.#...#.#.#.#.#.....#.....#.......#.......#...#...........#.#.#.#.......#.#.#...#.#.#.....#
  ###.###.#.#####.#.#.###.#####.###.#######.###.#.#.###.#.#####.#.###.#########.#####.###.###.#####.#.#######.#.#.#.###.###.#.###
  #.....#.#...#...#.#.....#.....#.#.....#.#.#...#.....#.#.#.....#...#.#.........#.......#...#.#.#...#.#...#.........#.......#...#
  #.#############.#######.###.###.#.#####.#.###.###.#.###.###.#.###.###.#.###.###.#.#.#.#.#.###.#.###.#.#######.#.#.#######.#####
  #.....#.#.#.#.#.#...#.#.#.....#.#.....#.......#...#...#.#...#.#.....#.#...#...#.#.#.#.#.#.#.....#.........#...#.#...#.....#...#
  ###.#.#.#.#.#.#.#.###.#.###.###.#.#######.#####.#########.#######.#.#####.#####.###############.###.###.#######.#.#.#####.#.#.#
  #.#.#.#.#.#.#...#...#.#.....#...#.#      M     M         K       D T     V     L            #...#...#.#...#.#...#.#.#.#.#...#.#
  #.#.###.#.#.###.#.###.###.#.###.###      I     E         W       M E     V     D            #.#.###.#.#####.#.#######.#.#.#####
  #.....#.............#.....#.#.....#                                                         #.#...#.#.#...#.....#.#...#.#...#.#
  ###.###.#.###.#####.#.###.#######.#                                                         ###.###.#.###.###.###.###.#.#.###.#
KW........#.#.......#...#.....#.#.#..PO                                                     AR..#.........#.......#...........#.#
  ###############.###.###.#####.#.#.#                                                         #.#.#.#.###.###.#.#.#.#.#.###.###.#
  #.....#.#...#...#.#.#.............#                                                         #.#.#.#.#.......#.#...#.#.#...#...#
  ###.###.#.#######.#################                                                         #.#.#####.#.#####.#.###.#.###.###.#
VR..........#...#.....#.........#....YB                                                       #.#...#...#.#.#.#.#.#.#.#.#.#.#....RI
  #.#####.#####.###.#.###.#####.#.###                                                         #.#.#####.###.#.###.#.#.###.#.###.#
  #.#.......#.....#.#.#...#.....#...#                                                         #...#...#.#...#.......#...#.......#
  #.#.#######.#.#.###.###.###.###.#.#                                                         #####.#######.#############.#.#####
  #.#.........#.#.#...#.#...#...#.#.#                                                         #.........#.#.#.....#...#.#.#...#..OX
  #####.#######.#####.#.###.###.###.#                                                         #.###.#####.#.#####.#.###.###.###.#
  #...#.#.#.#.#...............#.....#                                                       RI....#.#.......#.......#.....#...#.#
  #.#####.#.#.#################.#.###                                                         #.###.#.#####.###.#.#.#.###.#####.#
  #.............#.....#.......#.#...#                                                         #.#.#...#.....#.#.#.#...#.........#
  #.#.###.#####.#.#.#.#.#####.#######                                                         #.#.#.#.#.#####.###.###.#######.#.#
  #.#.#.....#.....#.#...#.....#.#....OL                                                       #...#.#.#.............#.#.#.#.#.#.#
  #.###.#.#####.#.#.#####.#####.###.#                                                         #########################.#.#.#####
  #...#.#...#.#.#.#...#.....#...#.#.#                                                         #.................#.#.........#.#.#
  #.#####.#.#.#.#.#.#.#####.#####.#.#                                                         ###.###.###.#.###.#.###.#.###.#.#.#
YB....#.#.#.#...#.#.#...#...........#                                                       DJ......#...#.#.#.......#.#.#.#...#..YF
  #####.#######.#.#.#.#####.#########                                                         ###.#########.###.###.#.###.#.###.#
  #.....#.......#.#.#.#.....#.....#.#                                                         #.........#...#...#...#...#.....#.#
  #.###.#####################.###.#.#                                                         ###.#####.#.###.###.###.###.###.#.#
  #.#...#...#.#.#.#...#.......#......OX                                                       #.#...#.#.#.#...#.........#.#......AA
  #.#.#####.#.#.#.#.#####.#######.###                                                         #.#.###.#######.#.#.###.###########
PO..#.#...#.#.......#.#.#...#.#.....#                                                         #.#...#.#.....#.#.#.#.#.#.......#..ME
  ###.#.#.#.#####.#.#.#.###.#.#######                                                         #.#####.#.#########.#.#####.###.#.#
  #.#...#.........#.........#...#.#.#                                                         #.#...#.#.#.#.#...#.#.#.#.....#.#.#
  #.#########################.###.#.#                                                         #.###.#.#.#.#.###.#.#.#.#####.#.#.#
UH..#...................#.......#...#                                                         #.#.#.....#.#...#.#.#...#...#.#.#.#
  #.#.#.###.#.#.#.#.###.#.###.#.#.#.#                                                         #.#.#.#####.#.###.#####.#.#.#.#.#.#
  #.#.#...#.#.#.#.#...#...#.#.#.#.#.#                                                       LM..........................#...#...#
  #.#.#######.#####.#####.#.###.#.#.#                                                         ###################################
  #...#.#.#.#.#.#.....#.#...#.#...#..VR                                                       #...#.#...........#.......#........JI
  #.#.#.#.#.###.#####.#.#.###.#######                                                         #.#.#.#.###.###.#.#.###.###.###.###
  #.#.#...#.......#...#...#...#.....#                                                       PG..#...#.#.....#.#.....#.#.....#...#
  ###.#.#.#.###.#########.###.#.###.#                                                         #####.#.###.#####.###.#####.###.#.#
  #.#.#.#...#.......#...#.#...#.#...#                                                         #.....#...#.#.#...#.........#...#.#
  #.###.#####.#.#####.#####.#.#.#.###                                                         #.#.###.#####.#######.#####.#####.#
MI......#.....#.#...........#.#.#.#.#                                                         #.#.......#.#.#...#.#...#.#...#.#.#
  ###.#####.#######.###.#####.#.#.#.#                                                         #####.#.###.#.#.###.#####.###.#.###
  #...#...............#.#.#.....#....MD                                                     JI..#...#.#...............#...#...#..ZH
  ###.#####.#############.###.###.###                                                         #.#########.#####.###.###.#.#####.#
  #.#.#...#.#.#.#...#.....#...#.#.#.#                                                         #.#.............#.#.#.#.#.#.....#.#
  #.###.#####.#.#.#####.#.#####.###.#                                                         #.#.#####.#.###.###.#.#.#.#####.#.#
PG..#...#.............#.#...#.#.#.#.#                                                         #.#...#...#.#.#.#.......#.....#...#
  #.#.#.###.###.#####.#.#.###.#.#.#.#                                                         #.#.#####.###.#####.###.#####.#.#.#
  #...#.......#.#.......#............YU                                                       #.......#.#.#...#.....#.......#.#.#
  #.#.#.#.#.#####.#.#.#.#####.#.#.#.#                                                         ###.#######.###.###.###.###.#.###.#
  #.#.#.#.#...#...#.#.#...#.#.#.#.#.#                                                         #...#.........#.....#.....#.#.#...#
  #.###.#########.#.#.###.#.#####.#.#        H       U Z             S     Y       F   O      #.#.#.###.#.###.###.###.###.#####.#
  #.#.#.....#.#...#.#.#.#.....#...#.#        V       H H             N     F       N   R      #.#.....#.#.#.#.#...#...#.......#.#
  ###.#.#.#.#.#.#.#####.#.#.#.#.#############.#######.#.#############.#####.#######.###.#########.#########.#######.###.###.###.#
  #.....#.#.#.#.#...#.....#.#.#.#...#.#.#.#.....#.#...#...........#.#.#.#.....#...#.#...#.#...#.........#.........#...#...#...#.#
  ###.#.#####.###.#######.#######.###.#.#.#.#.#.#.#.#########.###.#.#.#.#.#####.#.#.#.###.#.#####.###.#.#.#########.#.#.#.#.#.###
  #...#.......#.#...#.#...#.................#.#.#.#...#.......#.#.#...#...#.#...#...#.#...#...#.#...#.#.......#.#...#.#.#.#.#.#.#
  ###.#.#######.#.###.#.#####.#.#######.#.#######.###.#.#######.#####.#.###.###.#####.#.#.#.###.#####.###.#####.###.###.###.#.#.#
  #.#.#...#.#.....#.#.#.#.....#...#.#...#.#...........#.......#.....#.#.....#...#.#.#...#...#...#...#.#.........#.....#...#.#...#
  #.#####.#.###.###.#.###.#.###.###.###.###.###.#######.###.#.#.###.#.###.#####.#.#.#.#.#.#.###.#.#####.#.#####.#.#.###.#####.#.#
  #.........#.#.#.#.#.#...#.#.....#.......#.#...#...#.....#.#.#.#.....#.....#.#.#...#.#.#.#...#.......#.#...#.#.#.#.#.#.....#.#.#
  #.#.###.#.#.###.#.#.#.#.#####.#####.#.#.###.#.###.#########.#.#.#####.#####.#.#.#.#######.###.#####.#.#.#.#.#.###.#.#.#######.#
  #.#...#.#...#.........#...#...#.#...#.#.#...#...........#...#.#.#...#.....#.....#...#...#.#.......#.#.#.#...#.#.....#.#.#...#.#
  #.###.###.#######.#.#.#.#####.#.#####.#######.#####.#######.#.#.#.#.#####.#######.###.###.#.###.#####.#########.#.#####.###.#.#
  #...#...#...#.#...#.#.#.#...#.#.#.#.........#.#.....#.....#.#.#.#.#.....#.....#.....#.........#...#.#.........#.#.........#...#
  #.###.###.###.###.#####.#.#.###.#.#.#.###.#.#.#.#######.#.#.#.###.#.#######.#.#.#####.#####.#######.###.###.#####.#############
  #...#.#.#.#.........#...#.#...#...#.#.#.#.#.#.#.....#...#...#.....#.#.#.#...#.#...#.....#.#.#...#.....#.#.#.#...........#.....#
  #.###.#.###.#####.#.###.###.###.#.#####.###.#.#.###.#.#######.#.###.#.#.#.#####.#######.#.#.###.###.#####.#####.#.#########.###
  #...#...#.#.#.#...#...#...#.#...#.#.........#.#.#...#.......#.#.#.......#.#.#.....#.......#...#.#.....#.....#.#.#.............#
  #.#.#.#.#.###.#.#.#.###.#.#.###.#########.#########.###.#.#.#####.#####.#.#.#.###.#####.#.#####.#.###.#.#.###.#.#######.#.#####
  #.#.#.#.#...#.#.#.#.#.#.#.#.....#.#.#.#.....#.......#...#.#...#.#...#.#.#...#.#.#.#.#...#.#...#.....#...#.#.........#.#.#.....#
  #.#######.###.#.###.#.#.#####.#.#.#.#.#####.#####.#.###.###.###.###.#.#####.#.#.###.#####.#.#####.#####.#######.###.#.#######.#
  #.#...#.........#...#...#.....#.....#.#...#...#...#.#...#...#...#.#...#.....#.#...#...#.........#.....#.#...#.#.#.#.........#.#
  ###.#.#.#######.#######.#####.#.#.###.#.#.#.###.#.#.###.#.#.###.#.#.###.###.#.#.#####.###.#####.#.#.#.#.###.#.#.#.#.#.#.#.#####
  #...#.#.#.....#...#...#.#.....#.#...#...#...#...#.#...#.#.#.....#...#.#.#...#.....#...#.......#...#.#.#...#.......#.#.#.#.....#
  ###.#########.#.###.#############.#.#.###.#.#.#####.#######.#######.#.#####.#.#.#.###.###.###.#####.###.#######.#####.#####.#.#
  #.....#.#.#.#.......#...........#.#...#.#.#.#.#.#.......#.......#.#.......#.#.#.#.#.#.......#.#.#.#.#.#.#.#...#...#...#...#.#.#
  ###.###.#.#.#.###############.###.###.#.#######.#.###.#####.#####.#.#######.#####.#.#.###.#.###.#.###.###.#.###.#####.#.#####.#
  #...............#.........#.....#.#.....#.#.#.#...#...#.....#...#.....#...#.#.....#.....#.#.......#.........#.#...#.#.....#...#
  ###.###.#.###.###.#.###.#.###.#####.#.#.#.#.#.###.#####.###.###.###.###.###.#.#####.#####.#.#.#####.#####.#.#.#.###.###.#######
  #...#...#...#...#.#.#...#.....#.#...#.#.......#.....#.#...#.#.#.....#...#...#...#.....#.#.#.#.#.#.#.....#.#...#.#.#.#.......#.#
  ###.#.###.###.#########.#####.#.#.#.#######.###.#.###.#####.#.#####.#.#.#.###.#####.###.#.#####.#.###.###########.#.#####.###.#
  #...#.#...#...#.......#.#.#.......#.#.........#.#.....#.....#...#.#.#.#.....#...#...#...#.....#...#.#.#.......#...#.....#.....#
  #.###.###.#.#.###.###.###.#.#.###########.###.###.#.#.#####.#.###.#.#.#######.#####.#.###.#.###.###.#.#.#######.#.#.#####.#####
  #.#.#.#...#.#...#.#.....#...#.#.........#...#.#...#.#...#.#...#.....#...#.#.....#.....#...#.....#.#.........#.#.#...#.#.......#
  ###.#.###.#######.#####.#.#.#.###.#####.###.#.#.#########.#.#.#.#.#.###.#.###.#####.#######.#.###.#.###.#.#.#.#.#.#.#.###.###.#
  #.....#...#.........#.....#.#...#...#.......#.#...#.........#.#.#.#...#...#.......#.....#...#.........#.#.#.....#.#.....#...#.#
  #########################################.#####.#######.###########.###.#######.###.###########################################
                                           F     V       S           L   M       D   D
                                           N     V       N           M   D       J   M
"""

extension Array {
    mutating func popFirst() -> Element? {
        guard !isEmpty else { return nil }
        return removeFirst()
    }
}

enum Direction: CaseIterable {
    case left, right, up, down
}

struct Point: Equatable, Hashable {
    var x: Int
    var y: Int
    
    static let zero = Point(x: 0, y: 0)
    
    func adjacentPositions() -> [Point] {
        Direction.allCases.map { moving(in: $0) }
    }
    
    func moving(in direction: Direction) -> Point {
        switch direction {
        case .up: return Point(x: x, y: y - 1)
        case .down: return Point(x: x, y: y + 1)
        case .left: return Point(x: x - 1, y: y)
        case .right: return Point(x: x + 1, y: y)
        }
    }
}

struct Gate: Equatable, Hashable {
    let first: Character
    let second: Character
    
    static let initial = Gate(first: "A", second: "A")
    static let final = Gate(first: "Z", second: "Z")
}

let initialBoard: [Point: Character] = {
    var dict: [Point: Character] = [:]
    
    input
        .split(separator: "\n")
        .enumerated()
        .forEach { y, line in
            line
                .enumerated()
                .forEach { x, char in
                    dict[Point(x: x, y: y)] = char
                }
        }
    
    return dict
}()

func partOne() -> String {
    let initialGates: [Point: Gate] = {
        var dict: [Point: Gate] = [:]
        
        initialBoard.forEach { position, value in
            guard
                value.isLetter,
                let otherPosition = [Direction.up, .left].map({ position.moving(in: $0) }).first(where: { initialBoard[$0]?.isLetter == true })
                else { return }
            
            let boardPosition = [position, otherPosition]
                .first(where: { position in
                    position
                        .adjacentPositions()
                        .contains { initialBoard[$0] == "." }
                })!
            
            dict[boardPosition] = Gate(first: initialBoard[otherPosition]!, second: value)
        }
        
        return dict
    }()
    
    func nextPositions(from initialPosition: Point) -> [Point] {
        initialPosition
            .adjacentPositions()
            .filter { initialBoard[$0] != "#" && initialBoard[$0] != nil }
            .flatMap { newPosition -> [Point] in
                guard let gate = initialGates[newPosition], gate != .initial, gate != .final else { return [newPosition] }
                let oppositeGateLocation = initialGates
                    .filter { $0.value == gate && $0.key != newPosition }
                    .keys
                    .first!
                return oppositeGateLocation
                    .adjacentPositions()
                    .filter { initialBoard[$0] == "." }
            }
    }
    
    let initialPosition = initialGates
        .first(where: { $0.value == .initial })!
        .key
        .adjacentPositions()
        .first(where: { initialBoard[$0] == "." })!
    let endingPosition = initialGates
        .first(where: { $0.value == .final })!
        .key
        .adjacentPositions()
        .first(where: { initialBoard[$0] == "." })!
    
    var searchSpace: [(Point, Int)] = [(initialPosition, 0)]
    var visited: [Point: Int] = [:]
    var minScore = Int.max
    
    while let (initialPosition, initialSteps) = searchSpace.popFirst() {
        guard initialSteps < minScore else { continue }
        
        guard initialPosition != endingPosition else {
            minScore = min(initialSteps, minScore)
            continue
        }
        
        if let existing = visited[initialPosition], existing <= initialSteps {
            continue
        }
        
        visited[initialPosition] = initialSteps
        
        nextPositions(from: initialPosition).forEach { next in
            searchSpace.append((next, initialSteps + 1))
        }
    }
    
    return minScore.description
}

func partTwo() -> String {
    struct Path: Equatable, Hashable {
        let destination: Point
        let gate: Gate
        let steps: Int
    }
    
    struct State: Equatable, Hashable {
        var position: Point
        var level: Int
    }
    
    let initialGates: [Point: Gate] = {
        var dict: [Point: Gate] = [:]
        
        initialBoard.forEach { position, value in
            guard
                value.isLetter,
                let otherPosition = [Direction.up, .left].map({ position.moving(in: $0) }).first(where: { initialBoard[$0]?.isLetter == true })
                else { return }
            
            let boardPosition = [position, otherPosition]
                .flatMap { $0.adjacentPositions() }
                .first(where: { initialBoard[$0] == "." })!
            
            dict[boardPosition] = Gate(first: initialBoard[otherPosition]!, second: value)
        }
        
        return dict
    }()
    
    func isFirstCloserToCenterThanSecond(_ first: Point, _ second: Point) -> Bool {
        let center = Point(
            x: initialBoard.keys.max(by: { $0.x < $1.x })!.x / 2,
            y: initialBoard.keys.max(by: { $0.y < $1.y })!.y / 2
        )
        
        let d1 = pow(Double(first.x - center.x), 2) + pow(Double(first.y - center.y), 2)
        let d2 = pow(Double(second.x - center.x), 2) + pow(Double(second.y - center.y), 2)
        return d1 < d2
    }
    
    func generatePaths(from initialPosition: Point) -> Set<Path> {
        var paths: Set<Path> = []
        
        var steps = 0
        var currentPositions: Set<Point> = [initialPosition]
        var visited: Set<Point> = [initialPosition]
        var visitedNewPositions = true
        
        while visitedNewPositions {
            let newPositions = currentPositions
                .flatMap { $0.adjacentPositions() }
                .filter { initialBoard[$0] == "." }
                .filter { visited.contains($0) == false }
            
            currentPositions.removeAll()
            
            if newPositions.isEmpty == false {
                steps += 1
                newPositions.forEach {
                    visited.insert($0)
                    if let gate = initialGates[$0] {
                        paths.insert(Path(destination: $0, gate: gate, steps: steps))
                    } else {
                        currentPositions.insert($0)
                    }
                }
            }
            
            visitedNewPositions = !newPositions.isEmpty
        }
        
        return paths
    }
    
    var paths: [Point: Set<Path>] = [:]
    paths.reserveCapacity(initialGates.count)
    initialGates.keys.forEach { point in
        paths[point] = generatePaths(from: point)
    }
    
    let initialState = State(
        position: initialGates.first(where: { $0.value == .initial })!.key,
        level: 0
    )
    
    var searchSpace: [(State, Int)] = [(initialState, 0)]
    var visited: [State: Int] = [:]
    var minScore = Int.max
    
    while let (initialState, initialSteps) = searchSpace.popFirst() {
        guard initialState.level >= 0 else { continue }
        guard initialSteps < minScore else { continue }
        
        if let existing = visited[initialState], existing <= initialSteps {
            continue
        }
        
        visited[initialState] = initialSteps
        
        paths[initialState.position]!
            .filter { $0.gate != .initial }
            .sorted { $0.steps < $1.steps }
            .forEach { path in
                
                if path.gate == .final {
                    guard initialState.level == 0 else { return }
                    
                    let steps = initialSteps + path.steps
                    minScore = min(steps, minScore)
                    return
                }
                
                let dualGate = initialGates
                    .filter { $0.value == path.gate && $0.key != path.destination }
                    .first!
                let destination = dualGate.key
                
                let isInner = isFirstCloserToCenterThanSecond(path.destination, destination)
                
                var newState = initialState
                newState.position = destination
                newState.level += isInner ? 1 : -1
                searchSpace.append((newState, initialSteps + path.steps + 1))
            }
    }
    
    
    return minScore.description
}

print(partOne())
print(partTwo())

//: [Next](@next)
