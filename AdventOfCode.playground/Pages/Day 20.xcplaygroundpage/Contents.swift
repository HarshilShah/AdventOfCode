//: [Previous](@previous)
import Foundation

let input = """
^WNNENEESWS(SSSESSSENESEENWNWNENNENENENWWSWNWW(NNNENNEENWNENNNNNWWNWNENENWWWS(WNWSSESSWNWNNNWWNWNWNEEES(W|ES(W|ENNEEENNNNENWNWWWWWNWNEESEEENWWNNNNWNWSSSE(N|SWWWNNE(S|NWWSSWWNENWNWWSWNWSSWSWWSSSSSSWNNNNWSWSSWSWNNWNEE(NENNNWWWWSESE(NESNWS|)SWWNWWSESWWNWWSSSSSSWWSWSSSSSSEESWWSWWWWWWWNWSSSESEEESENNN(ESSSENNEESESEEENESENENENEEESSESWWSESSSSSWSESSWNWWWSWNNENNWNEESSSENNENNW(N(E|WWN(EN(E(S|N(ENWESW|)W)|W)|WSWWWSEE(SWWSSWNNWSWWNENEENN(WWNW(N|SS(SWSSSWSWSSESSSEEEENNENWWNEEN(WWN(WSSSSS(ENSW|)WNNN(W|N)|E)|EEE(N(WNEWSE|)E|SWWSSSWSESEESSESWWWSEESESWSESWWSWSSESSSSSSSSWNWNNWSSWWWNEENWWWNENEEENEE(SWS(ESSNNW|)WWW|NWWNENWWNWSSWNWNENNENESENNNNWWSWS(EENSWW|)SWSSWSSWSWNNWWNWSSEESSWWWN(EE|WNNE(S|NWWNWSWSSENESSWWWNWNWSSWNWNNE(S|EEE(S|NWNNEEEES(EENWNEENNESEENWNWWWSWNNWNWSSSE(S(SWWWNNNE(SSEWNN|)NWNNNNWSWNWNWWSSE(SSWSWNN(E|NNNNEENWNW(S|NNENESEEEEESWWSWNWS(WNWESE|)SES(W|EEES(SSEENNNW(NN(WWS(E|W)|ENNNNWNENESSENE(NWNNNWNWSSWS(EENSWW|)SWNNNWSWSESSESS(ESSNNW|)WWN(NWWS(ESWENW|)WNWSW(NNNESENESE(E|NNNNE(NWNWNWWNEENEENWWNWNNENENENWNWNWNNWW(NENWNNENNNEENEEENESSWSWSWSSENENENEEESWSW(N|WSSENESESSWWN(E|WWN(WWWS(WNN(W|ENNW(NEENEWSWWS|)S)|ESS(WNSE|)EN(N|ESE(N|ESSESWWW(SSWSESEENEESSSSSWSESWS(WNNNWW(WWSESESSE(ES|NNNW)|NENN(ESE(SWEN|)NN|W(WWN(N|W|E)|S)))|EE(ENENESESS(WNWESE|)ENENENWNNNEE(NNENENNNWSSWWS(WNWSSS(ENESNWSW|)SWNWNNE(S|NNEENESENNNNESES(W|E(NNEENE(S|NESENNNENWWNNESENNNNESENESSWSW(N|SESENEEENWW(W|NENEENWNNENNEEESEESSESSWNWNWWW(NNESEE|W|SEESSSWNW(NEWS|)SW(NWES|)SSSWNWSS(EES(WWSESW|ENENWNNESENEENN(EESWSEENNNESEENEENWNWNNNNNENESESESWWNWSSEESS(WNWESE|)SENENEENEESENNNWNWSWNWSW(NWNENNEN(WWSSW(S|NNWWSWWN(WWWSWSESSWNWNNWSWWSSS(EESEN(NWNWSNESES|)EESWSSEEN(ESE(NNNNWNN(ESENEEN(SWWSWNSENEEN|)|NWSSSSSEN(SWNNNNSSSSEN|))|SWS(WNWSSNNESE|)E(E|S))|W)|WNNNNEN(E(S|EEE)|WWWWWSSENESE(SWWWWWNNE(S|NWWWSWSWSESENNE(N|SSEEEEES(ENSW|)SSWNNWWWSSSWWNENNWWS(WNNWWNNWWWWWSSENESESWWSESSSENNEESSESWW(SESSWSWWNNE(E|S|NNWSWSWSSWWWNWNNENNNNWWNEEESSSESWSS(W|E(SWEN|)NENENNNWNW(SSESNWNN|)N(WNENWWWSS(ENSW|)WNWWNWWWWWSSWNNWWWWNEEEEEENWWWWWN(WSWNWSSSSE(EESWSSWSESENNNESSEEES(ENNENW(NNEES(W|SSENESE(NNWWNSEESS|)SSWWWN(WSSESENESSENNE(ENWNEWSESW|)SSSWSWW(N(E|NWWWN(N|E))|SS(WNSE|)ENEESESSWNW(N|WWSEESWSSWSESSWNW(NNN(EN|WS)|SS(EESE(NENWNNEES(ENENE(NNWNW(NNN(WNWESE|)EESWSESESEE(S|NNEENEE(ESWWSWWSE(WNEENEWSWWSE|)|NW(WWWW(WSE(S(W|S)|EE)|NN)|NENNEENW(W|NEN(EEEENE(NWNEWSES|)SS(ENNSSW|)S|NNWS(S|WNNWW(W|N(NNWESS|)EE)))))))|SWSS(ENE|WWNEN))|S)|W)|SWW(N|SEESESS(ENESS(S|W)|WNWSW(NNEWSS|)S(E|S))))|WNWWS(S|E)))))|EE))|WSWWN(NWNEWSES|)E)|WWSW(WWSWW(SSS|NN(ESNW|)NNNENW)|N))|NN)|EEEEEEEEEEEESS(EENWNEES(ENEEES(WW|EEE(N(E(S|E)|WW)|SS))|S)|WW(SEWN|)N(E|WWWS(WNSE|)EE)))|E)))|NN)|E)))|N)))|E))|EESSENESS(ES(W|EEENEENNWN(EEESSSW(NN|SESWSEESWSWNWWNN(WWWWSSENESE(SSEE(NWES|)SEEEENW(WW|NEENNNNESSENNNNNWSWS(E|WW(NENN(WSNE|)E(S|EEESENEESSENNEEEESSSSESSESSWSWWSESENESSEEEEESENENENWWWS(E|WWNENWWW(SESWENWN|)(NEENNENWWNNESEEENWNW(NN(WSWNWSWW(NEWS|)SEE(SW(SSE(SESWENWN|)N|W)|EE)|EEESESESSSSWSEEENNNW(NNNEN(WW(S|W)|ESEESSSWSESENEENNWW(SEWN|)NEENN(WSWNWW|ESSE(NN|SWSESSW(WSESWWN(WSWWW(SEEESENESSESWSESE(NNNNN(WSNE|)NN|SSSWNNWSWNN(NNNWSWWWNEENWWWWNN(ESNW|)WWWWS(WNN(WSNE|)NEN(W|E(SSWENN|)ENNW(NWNWESES|)S)|EEESSEESSSENEEESSWW(NEWS|)SSESSWSEEESWSWWWN(EE|NNWWNWWWSWNWWWSESWWWSSESSWSEEESWWWWWSWSESENNESESSEEEESWWSWNWSSWWSSWWWNENWNEE(SS|NN(EE(SSWNSENN|)N|WSWWNWSWSWSWWWNEENENWWSWNNEEENWWWNWSWNNENNNNNNNWNWNNNNEESENNEESWSEENNNEESWSEESESSSSWSSWWWSWSESENNESENEESEE(E|NWNENNWW(NNESENNNNEEEE(NWWWWWWS(WNWNN(ESEEWWNW|)NNWSWWS(EE|WWWWWSWS(EENEEE|WSWNNN(E(S|ENEEENENWN(NESENEENEENWWWSWWWNENWNEE(N|S(S|EEEEE(NNWWSE|SSESWSWW(NEWS|)WS(SWW(SW|NEN)|EEEENE))))|WWSS(ENSW|)W))|WSSSSEESSWWWN(EE|WNNE(S|NNWSWNN(EE|WSWNN(EE|WWWWWWN(E(N|EEEEN(ESNW|)W)|WSWSSWNWSWWSESENESENESSSSWSSS(WNNNNENWW(S|WWWN(E|NWSW(SES(E|WWNWWWW(EEEESEWNWWWW|))|N)))|EEENNEESSENNENNWWNENNWSWNWSSESS(EE|WNW(SSSWNSENNN|)NNNNEN(WWSNEE|)EEEES(WWW|SSSENNESSSE(SSE(N|EESSEESSSENNN(NWWNEWSEES|)ESSSSSWSSSWNNNN(WNNNWWSWSSSSSSWSWWNENWWNNNNWNEENEE(ENN(ESNW|)WWW(NN(ESNW|)N|S(EE|W(N|SWWW(SESWSEESWSWW(N(E|NNNW(N(WSNE|)E|S))|WSESENEE(N|SWSSENE(SSEEN(EESSSENNNN(W|ENE(NNNWW(SS(ENSW|)S|NNE(S|N))|SSSW(N|SSEESENESE(SWWWSWSSSWNWWWNNNN(NN(N|WSSWWWSESSWSSSW(SSENEEESWWSESWWW(NEWS|)SSWW(NENWESWS|)S(WNSE|)EEEENWNEESSSEENWNNEES(SSESSSWNWN(WSWSSWNW(NEN(N|E)|SSESENESESWSWWSESSENNESENN(W|ESENENENWNNNNNW(SSSSSSWNW(S|NN(ESNW|)W(WNEWSE|)S)|NENESSEESSWW(NEWS|)SSENESESSWW(NEWS|)SWSWSSEEEESSSWSSEESWWWWWWNNESEENNNWS(WNWSWWWNN(WSSWSSSWNNWSWWSSENESEEENNEN(W|EESWSSSSSWSEEEEEEEESESEENNW(WNWWNWSWWWNW(NEEN(WWNSEE|)EES(WSWENE|)ENESES(W|ENN(W|EESESWW(S(W|ESSSESWSESESSWNWSWNWWWWWWSSEESSWSSESSSSENNNNN(W|EESSEEENNENNWWWN(EEEEESEESENNWWNNWNENWNWW(SESSSE|NEEENNENNWSWNWNW(NWNWWWNNENEESENNNWNNWWNWSSEESS(WWSW(SWEN|)NN(NNWNEN(NENNW(NEEEESSESEEENWWNENWW(NENWNENEEESWSESSEESEESSENEEESEESENNEEEESEESWWWWN(WSSSWSEEESENEESWSWSEENENNESE(NNNWW(NNENNE(SSSWENNN|)NNNWNNE(S|NWWWSWWNWSSESWWWSEEESEENE(NWN(WSS|EN)|ESWSSWNW(S|WWWN(WSWWW(SEWN|)WWNWNEEENEE(SSW(WW|N)|NWNEENNE(SSSWENNN|)EEE(S|ENESENE(S|NWNWSWWSWNWSWWNNWSSSSWNWSSSWWWS(WNNNEENE(SSWWEENN|)NWWWS(E|WWSWSSEE(SWWW(NNNNWNWWSES(E|WWNWSSWSWSS(ENSW|)WWWNEENNENENWWSWWNENEEEENNENWWWWWWNEENNNNESSSSEENWNENNESSSES(W|ENENWWNENEEN(EESEESSENNEESWSSEESWSEE(ENWNENNNWSSW(W|NNNNNWSWS(WNNENN(WSWSW(N|WS(EESW|WN))|ENNESESWS(ESSSEEENENNEESSENEENNWSWNNNEENWNWNWSS(WWWWSW(SEES(EEENNWSWNW(ESENESNWSWNW|)|WWSSE(SW|ENW))|NW(S|WWNEEEENWWWWWNEEEEEEEE(SWS(WNSE|)E|NWWNWWWWWS(EEEE|WW(NENNWWS(E|SWNNN(EEEESSEEEE(NNWWW(SEEWWN|)N(WWWN|NESEE)|EESEEN(ENENNEE(SSW(N|SSSWS(WWNENEN(SWSWSEWNENEN|)|SENE(SS(W|SSS(SSSSSSWNW(NEWS|)SSWSESWWNWSWNWW(SESESW(WNSE|)S(EENNEES(WSEWNE|)ENENE(NNWSNESS|)SS(S|W)|S)|NEEN(ESENENWW(W|NN)|WW))|WW))|NNN)))|NWN(WSWNW(S|N(NWES|)EE)|E))|W))|W))|SSWW(W|SEES(ENSW|)WW))))))|E)|W))|E))|SWS(ESWENW|)WWN(WNN(ESNW|)WWSESS(WSWW(S|NNWNENNNEN(ESS(WSSS(S|E)|EE)|W(N|W(W|SSSWSWWSES(WWSNEE|)E(ESNW|)N))))|E)|E))|WWW(S|WWNENNW(NEWS|)SW(SWWWS(EEESSNNWWW|)W(NNEEEWWWSS|)WWSSESENE(NWWEES|)SSWWSSSES(EEN(EESWENWW|)W|WS(SSS(WNW(S|NNNNE(NNWNENWW(NNE(S|N)|SSS(WSWNWSWNW(SWSEEEESWSSENENNE(SS|N)|NEEN(ESENSWNW|)NWSWNWNW(NENWNE|WSSE(N|E)))|E))|SSS))|S(ENESNWSW|)SSS)|E))|N)))))|SEEES(E(SEWN|)N|W))|N(W|N)))|EE))))|E))))|WWWWS(WNSE|)EEEEE)|SSSWN(WSWSWSSSESWSSWSEENNESSEE(NWNENNNWNN(ESNW|)WSS(SESW|WN)|SSWSWSESSE(SSWWWNNWNE(ESSEWNNW|)NNNN(E(S|E)|WWWNWSSSENESE(N|SWWSESSWNWWWWWNWSSSSSSENNEEESWSW(N|SESWSWSWNWNEENWWNNWSWWNWSSSWNNWWSSE(N|SWSESWSESEENWNNESEESSW(N|SSWNWSSESESENENNN(WSSWENNE|)NEENN(WNW(SSEWNN|)NWSWN(NNEESW|WW)|EENESENENNW(SWEN|)NNESESEESENEENNWSWWWNWNENN(WW(WWWWNEEEE(WWWWSEWNEEEE|)|S(S|E))|E(N|SEES(WSWNSENE|)ENESSSSSSSSWSWWNENN(E(NWES|)S|WWWNWSSWSEEE(N(E|W)|SWWSWNWSWWSWSSSSEEENEESSESSEENENESSE(NNNWWWW(NNW(NN(WWWWSS(SWNNSSEN|)ENESEN|NEEESSEE(NWNENSWSES|)SWWW(SEEE|NNWS))|SS)|S(E|S))|SWW(N|WWWWNWN(E|WN(ENSW|)WWSESS(WNWWWWNWWSWS(WWNNWNNNNE(ESSE(N|ES(ENENESS(E(NNNWNNNE(ENEN(W|E(E|S))|SS)|S(ENSW|)W)|W)|WW(WNNSSE|)S(E|S)))|NWNN(ESNW|)WN(E|WSSSSE(SWWWWNWNNEES(SENNNNNNEE(SWEN|)NNNWWNENNN(W(SSWSSWWWSSEEE(EENWWWW(EEEESWENWWWW|)|SWSSE(SWWWWSSE(N|SSSE(SENEESWSSWNWWSWNN(E|WNNE(NWWSSSSWNWSWWWSES(WWNNNWWSSWWNWNNWSWWWNWNNWNWSWWNWWSESEESENESSESESENEESWS(WWWWN(E|NWNWSWWSES(ENESNWSW|)WWWNNWNENN(ESES(WSS|EN)|NNWNNWNWSWWNENENWWWNENNNEENESESSWNWSW(SEEEENENNESESENNWNWWW(NW(S|WWWSWNNWNEESENESENNWNWSWNWSWWWNNESENNEENEESES(WW(N|WW)|SESSES(SENEEENESENNNESESSESWSEENNNNNEEEEESSSEESSSWSEENE(NWNENWN(EE|NWW(SEWN|)NEENWNNWNNN(EEESENESSWSS(ENEN(EEESWS(EE|W(W|N))|N)|WNNW(WNEWSE|)SS)|WWSESWWWSEEESESWWNWWS(WWWNWNWWNEENNWNNWWSSS(SSSS(ENESESESS(NNWNWNSESESS|)|SWS(E|WNWNNNWWNENWNNENEESE(SSWS(ESSW(SEWN|)N|WNN(W|E|N))|NNNNESES(W|EESES(W|SSENES(SWWSEESW(ENWWNEWSEESW|)|EENWNNWW(SEWN|)NN(EEEE(NN|SW(SS|WW))|W(S|WWNWNWWNEENE(NENNNWWNN(WWWWNNWSSWSSENEESWSSWSWNWN(NWWWWWNNWSWNWWNNWNENNNESSSESWSEEEEESS(WNSE|)ENENE(SSWENN|)NE(S|NWWSW(S|WNENWNNEES(W|SENE(EESS(ESS|WNW)|NNW(WNWNEEE(SWEN|)ENENWWSWWNWNEE(S|ENNWWWNNNENESENENEEESSSSSE(SWWNNWSSS(WNNNN(WSWNWS|NESENNW(ESSWNWESENNW|))|ESSENN)|NENWNENE(NWW(S|N(EE|W(WWWNWNNWSWWWSESS(SWSWWSEESSWWWWNE(NWNNWWSESSWNWWW(NNESENNNWNNWSSS(WNNWWNNWWSWNNNNNENWNWNENE(EESEESWWSSEESSESS(WNW(SSEWNN|)NWWN(WSSEEWWNNE|)(EE|NNNWNE)|ENENEEESWWSSS(WNNSSE|)SSEENNNW(NEENNEESS(EEEN(WWNN(ESEWNW|)NNWNENWWWNNWNENENNWWNW(SWSSW(NNNEWSSS|)SSSSESSENNE(SSSENE(NWES|)SESWWWWNWSWNNWSS(S|WNN(WW|NNE(SEWN|)NWWWNENN(SSWSEEWWNENN|)))|NWNW(S|NENNE(S|E)))|NEEN(E(N|SS(ESSSEENN(W(NEWS|)S|ESSESEEEEESSWNWWSWSS(WWNNW(SS|WNN(WWSESW|EES(W|E(E|SS))))|E(NE(SEENWESWWN|)N|S)))|W))|W))|EE)|W(SWSSENE(N|SESWSWW(NEWS|)S)|N))|SS))|NWWNE(N(WWWW(SESE(N|S(E|WW(SSEE(NWES|)SWSWNWW(NEWS|)SSSEN(EESESSWSSENE(NNNNWNEN(SWSESSNNWNEN|)|SS(ENEENSWWSW|)SWWN(WNW(NNE(N(N|E|WWWNNNN(SSSSEEWWNNNN|))|S)|WS(ES(SENSWN|)W|W(N|WW)))|E))|N)|N)))|N)|N)|E))|E)|SESSSWSEEESEESSS(ESSW(SEESS(WNSE|)ENNNWNNE(S|E(E|NNWWW(SEEWWN|)NEEE(E|NWNN(E(EEE|S)|WWSESWWNNWWW(SEESNWWN|)N(EE|N)))))|N)|WWNENWWWSESWSESWS(SWSWSESWSEEE(NNW(N|S)|EESSWWN(WWSESSESEEEESSSSWNNWSWNN(EE|WSSSWNNWWSESWSWSESENNESSEENN(WSNE|)NESEEENNENEENESSSWNWSSW(N|SESSENESSE(NNNWN(WSNE|)EE(S|ENEE(SWEN|)NWWNENWN(WSSW(SESWENWN|)NNNWWS(WSWNW(NNESENN(EESWENWW|)WWWSW(NNEWSS|)S(E|WWN(E|W))|SS)|E)|EE(SS|ENE(S|ENENWWSWN(WSSW|NENW)))))|SW(WWN(WWS(E|SWWNENWNEEENWWWW(NEEEWWWS|)SSSWSES(WSWSWSSSENNE(N|SESE(SESSWSS(ENSW|)SSSWNWSWWWWSSSWSESESESEEESSSS(WNWSWNNEENWWWSSWS(WNWSWNWWNNEEES(WW|EENWNE(E|NWNWWNNWWWNWNWWNWSSWNWWWWNWNENWNNWWWNNESENESEEENESSESEEEESSEESW(SESEEE(SS|NWNW(S|NNNWNEESSSESE(NEENENNNESESWS(SWEN|)EENNNWNWWWSSSWWS(E|WNNNESENNNE(EEE(ESEWNW|)N|NWWWWSES(ENSW|)WWWS(EE|WS(SSEWNN|)WWNENENNENNNWNEESSENNNNNWSSWNNNENENNNWNNEENNNNWNNWSW(NNNN(NENNNENEENWWWN(WWSES(E|W(WNNW(NEWS|)SS|SES(S|W)))|NESEEENNE(SSSWSESWWS(E|SWW(NENSWS|)SSENESSSESWS(SENESSESWWNWSSSSW(SSSSS(SENEEN(WWNSEE|)ESSWSW(SSE(EN(W|EN(NNENWESWSS|)W)|SSWS(E|WNN(NW(NENWESWS|)SSSWWSSW(ENNEENSWWSSW|)|E)))|N)|W)|W)|WNNWWN(EE|N)))|N(WNNNN(ESNW|)NN|EE)))|W)|SWSW(SEENE(N|ESWS(WWSSE(SSS(ENSW|)WW(NN(ESNW|)NNN|SSE(NEWS|)SSSWWSESWWNNNWWSESSSWSSESSS(SENNNE(NE(NWN(EESNWW|)WS(S|W)|S)|S)|WNNWNWNNWSSWWWWWWWSE(EEEEESENE(WSWNWWEESENE|)|SSSSWNNNWNWSSSE(N|SWWNWWWWNEEENWNNNWSSWNNWNWSWSWW(NENWNENENWW(NNESEEESSEESENEEEESWWWS(SEES(ENEEENENNEESSW(S(EENNENWNWNENWNWNEN(WWSWNNEENNE(SS|NE(S|N(W(NEWS|)WSW(WWSWNWSWSWNWSWNNWWN(WWWSSSWSESESEEESWS(WNWW(SEWN|)WWNE(E|NWNNNNE(NWNNNE(SSEWNN|)NNENEE(SWEN|)NWNEENWNWSWSSWW(NENNW(NEE(NENEE(NWWNSEES|)SWS(ESNW|)W|S)|S)|S(SS|E))|S))|SSEEEEENENNNENWWWWSESE(SWWW(WSEEEWWWNE|)N(E|NNWWWNNW(NNESESE(N|S(EEEEENESE(NEENWESWWS|)SSSSENESSS(ENNSSW|)WSWS(E|W(S(E|WWW)|NN(W|N(NN|E(S|E)))))|W))|S))|N))|EEESEENW(ESWWNWESEENW|)|N)|N)|ESENE(N|S))))|ESSESSEE(NWNEESE(EEESWENWWW|)N|SSW(NWES|)SE(ENSW|)SS))|W)|N)|WS(WNSE|)SS)|WWWNWW(WSNE|)NN)|S)|SEESSWW(NEWS|)SSESWSSSESSEESSEENNEENNEENNEESWSSSEESSESWSSENENNNNESESSENNENWWNE(EEEESWWSSSENESENEESEEEES(EN(EESWENWW|)NWWWWNE(EEE|NWW(NEWS|)SWW(NEWS|)WW)|WWWSEESSS(EE|WNNWWSWS(EENSWW|)WNWWS(WWWWWNNW(SSWWNENWWWWNNWWNW(SSESWWNWNENWWSSSESS(WNWNWW(NNENWNEN(WNNSSE|)ESSSSW|SES(W|E))|EEN(ESEEEN(WWNN|ES)|W))|NNEES(SENEN(WNNWSNESSE|)ESSSSWNN(SSENNNSSSWNN|)|W))|NEN(NN|EEE(NN|SWWSES(ENE(S|ENESEENN(ESNW|)(N|W(WWWSNEEE|)S))|W))))|E)))|NWWNNE(NNWWS(WW(SSSEE(NWNEWSES|)S(E|W(WWNSEE|)SS)|WWWWSWNN(E|WSSWSE(SWWNNNN(ESNW|)NNW(SSSW(NNWESS|)SESSW(NWNSES|)SEE(SS|EE)|NE(NWNEWSES|)EE)|EE)))|E)|S)))))))|N)|E))|N|W)))))|SS)))|WWNWN(WSWWS(E|WNW(NEE(NWWN(WSNE|)E|E)|S))|E))))|E)|ENNNESEEENNWSWNWNW(S|WNWW(SEWN|)WNWNENESSEEEEN(NN(NEWS|)WSWW(SEEWWN|)N(WWWSNEEE|)E|ESS(WW|SEENE(ESWS(E|SSSWWS(WWNE|EEEN))|NWN(WSSNNE|)E)))))|N))|E))|E)|SESEESW(SSE(ES(E|W)|N)|W)))))|E))|E)))|EE)|EEN(WNE|ES))|N(E|NN))))|S)))|S)))))|EE)|EES(W|ESSSS(SWEN|)EENN(ESNW|)NNW(SSS|NWNNE(EE|S|NWNW(NENSWS|)S))))|SS)))))))))|E(NN|E))|E)))|ESSW(WWSEESWWSWSESESSSWSS(WWWWW(SESNWN|)NENENESE(SWWEEN|)NENWWWWNWWNNNWNNEENENEE(NWWWW(NEEE(EESNWW|)NWWWNNESEENW(ESWWNWESEENW|)|S(E|WS(WWN(WSWSWNW(NENN(WSWNWESENE|)EE(SWSNEN|)NN|SSEEENESSE(NN|SESSSWSESS(WSWNN(W(S|NNE(S|NENWWWWWNEN(WWSWWSWW(WNWNEEE(SWEN|)EEN(W(N|W)|E)|SES(W|ENENESES(ENE(SS|E)|W(W|S))))|EES(W|E))))|E)|ENEN(NWSNES|)E)))|E)|E)))|SSESWWSWW(N(ENENSWSW|)W|SEES(SE(NNNEWSSS|)E|WW)))|SENE(ENE(NWNNNEEE(NENWWSWWN(WS(WNSE|)SSSSSW|EN(WNSE|)EENE(SESSENN(SSWNNWESSENN|)|NNW(NN|S)))|SSWWNE)|S)|S))|N))|W)))|SS)|N)))|EE(N|EEEENN))|ENEEES(E(NN|EEE(N|EEEENE(ESWENW|)NW(WS|NNES)))|WW))|S))|N))|N))|N)|ES(EEENNENWNNWW(SEWN|)NNN(W|NESENEENWWNEENNWWW(S(SSWENN|)EE|NENWWSWNNEENNWNNNNNESESWSEENENENWNN(EES(W|SESSSESWWNW(NENSWS|)SW(SWW(SSEEN(W|ENEESWSWSS(WNWSNESE|)ENEEESEEENESENE(SSWS(WS(WNN(E|WSSSSE(N|SWSESS(ENSW|)WWN(E|WWNNENWNNNN(EESSW(SESSSW|N)|NWSWWSSESE(NNWESS|)SWSESSWNWWSSW(NN(WWSE|NEENN)|SESENESE(NNWWNSEESS|)SSWNWS(S|W(N|W)))))))|E)|E)|NWNWNNWNN(WSSWNW(NNNE(N(WNWS(WNNWESSE|)SSS|E)|SS)|SSESEE(NWES|)S(E|WW(SEWN|)WNW(SWEN|)N))|ESESSE(E|S))))|N(W|E))|N))|WWS(ES(W|S)|WNNEN(ESNW|)WW(N(E|WNNWNN)|SSSWWSESSSSWW(NNE(NWNW(NWWNE(NWNW(NE|SSW)|EE(EE|S))|S)|S)|SEES(WSW(SESNWN|)WN(WW(W|N)|E)|E)))))))|SS))|W)|NN)))|EE(N|EEEE))|E(N|E)))))))))))))))|NNN))|N))|E)|S)|S)|WWSWS(W|E))|EE)|E)|SSESS(ENSW|)WNW(N|S)))|WWW(N(WW|EE)|SSEE(NWES|)EE(SSWNSENN|)E))))|N)))|S)|S))|EN(W|ENESS(WSW|EEEES)))|S))))|E)|W)|NNNN(E|NWWNEENEEN(ESNW|)WNWW(NWSWWN(WWSEWNEE|)EN(EE|N)|S(S|E)))))|ESEE(SWWSEE|N(ESNW|)W))|NNNWNENWWSW(N|SS(E(N|E)|W))))))|W)|N)))|NN))))|SWSSE(SS(WNW(S|NN)|S)|N))|E))|NN))))))))))))|SE(SWEN|)N)|EESSES(WWNNWWWWSEES(ENSW|)WWSSEN|ENENWNEE(NWN(WSWSSNNENE|)E|SSENESSS(WNWWEESE|)E)))|S(WSEWNE|)E)|SSWNWW(WWSSWS(WWNN(WS(S|WNNE(E|NWNNNNESE(SWSNEN|)NEES(W|ENNNWN(E(ESS|NW)|WSS(WWWWNN(ESEENW|W(N|S))|E)))))|E(E|S))|SS(ENESE(E|NNW(NNESEN|W)|S)|S))|N))))))|E))|NN(ESEWNW|)NNNWNEES(NWWSESNWNEES|))|N)|N))))|SS))|S)|W)))|SSE(N|SS))))|N)|E(NWES|)S))|WWSWW(SESENE(N|E)|N(E|WW))))|WWWWNEN(SWSEEEWWWNEN|)))|SE(SWWSNEEN|)EEE)|W(N|S)))|WWN(ENSW|)WSW(NN|W))))))|SSSS)))|E)|SWSESSSSW(W|N))|S))|NWN(EESNWW|)W))))|N)))|SSE(SWSEE(N|ESWWS(E|SW(NN|SSSS(SSSSENESESSWS(E|WNN(WSSNNE|)E)|EN(ESNW|)NN))))|N))|S))|S)|E)|SSWWSSSS(W|SESENNNEESENES(SWWSSSWN(WWSW(NN|S(WWWSNEEE|)ES(SENEN(WNSE|)ESES(SESESE(ENNESENESE(SSSESS(ENNSSW|)W(S(W(SEWN|)WW|E)|N)|EN(ESNW|)WNWWWWWW(SESNWN|)NW(S|NENWW(NENWESWS|)S))|SSWWN(N|WWSW(N|SES(WW(NN|WW)|SENN(N|ES(ENSW|)SS)))|E))|WW)|W))|NNN)|ENNNE(NN(ESNW|)WSWNWSWW(SWS(EENESEN(SWNWSWENESEN|)|W(SS|N))|NNE(E|S))|SS)))))|SS)|WWW))))|N)|EE)|N)|WW(W|S)))))))))|EE))|EEE)|EEE)))|S)|WWS(WNWESE|)E)|S)))))|E)|SES(SSW(NNWSSNNESS|)SS|E))|W)$
"""

extension Sequence {
    func count(where predicate: (Element) throws -> Bool) rethrows -> Int {
        var count = 0
        for element in self {
            if try predicate(element) {
                count += 1
            }
        }
        return count
    }
}

enum Direction: Character {
    case north = "N"
    case east = "E"
    case west = "W"
    case south = "S"
}

struct Position: Equatable, Hashable {
    var x: Int
    var y: Int
    
    static let zero = Position(x: 0, y: 0)
    
    func byMoving(in direction: Direction) -> Position {
        switch direction {
        case .north: return Position(x: x, y: y - 1)
        case .east: return Position(x: x + 1, y: y)
        case .west: return Position(x: x - 1, y: y)
        case .south: return Position(x: x, y: y + 1)
        }
    }
}

var previousCharacterWasPipe = false
var previousPositionsForPosition: [Position: [Position]] = [:]
var currentPositionsStack: [[Position]] = []
var currentPositions: [Position] = [.zero]

for character in input.dropFirst().dropLast() {
    switch character {
    case "N", "E", "W", "S":
        let direction = Direction(rawValue: character)!
        let previousPositions = currentPositions
        currentPositions = currentPositions.map { $0.byMoving(in: direction) }
        zip(previousPositions, currentPositions).forEach { previous, current in
            previousPositionsForPosition[current, default: []].append(previous)
        }
    case "(":
        currentPositionsStack.append(currentPositions)
        currentPositionsStack.append([])
    case "|":
        var currentBranch = currentPositionsStack.removeLast()
        currentBranch.append(contentsOf: currentPositions)
        currentPositions = currentPositionsStack.last!
        currentPositionsStack.append(currentBranch)
    case ")":
        if previousCharacterWasPipe {
            currentPositionsStack.removeLast()
            currentPositions = currentPositionsStack.removeLast()
        } else {
            let currentBranch = currentPositionsStack.removeLast()
            currentPositions.append(contentsOf: currentBranch)
            currentPositionsStack.removeLast()
        }
    default:
        fatalError("Unexpected input")
    }
    
    previousCharacterWasPipe = (character == "|")
}

var shortestPaths: [Position: Int] = [.zero: 0]
let totalPositions = previousPositionsForPosition.count + 1 // because we're including .zero

repeat {
    previousPositionsForPosition
        .filter { $0.value.contains { shortestPaths.keys.contains($0) } }
        .forEach { position, previousPositions in
            let pathsToPrevious = previousPositions.compactMap { shortestPaths[$0] }
            let shortestPathToPrevious = pathsToPrevious.min()!
            shortestPaths[position] = shortestPathToPrevious + 1
            previousPositionsForPosition.removeValue(forKey: position)
        }
} while shortestPaths.count != totalPositions

let furthest = shortestPaths.max(by: { $0.value < $1.value })!
print(furthest.value)

let moreThanAThousandSteps = shortestPaths.count(where: { $0.value >= 1000 })
print(moreThanAThousandSteps)
//: [Next](@next)
